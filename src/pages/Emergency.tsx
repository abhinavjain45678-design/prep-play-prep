import { useState } from "react";
import { Header } from "@/components/Header";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Badge } from "@/components/ui/badge";
import { PhoneCall, MapPin, User, Download, Heart, AlertTriangle, Phone } from "lucide-react";
import { useToast } from "@/hooks/use-toast";

interface EmergencyContact {
  name: string;
  phone: string;
  relation: string;
  address: string;
  nearestHospital: string;
  hospitalPhone: string;
  localEmergency: string;
  policeStation: string;
  fireStation: string;
}

export default function Emergency() {
  const [language, setLanguage] = useState("en");
  const [contact, setContact] = useState<EmergencyContact>({
    name: "",
    phone: "",
    relation: "",
    address: "",
    nearestHospital: "",
    hospitalPhone: "",
    localEmergency: "",
    policeStation: "",
    fireStation: ""
  });
  const [isGenerated, setIsGenerated] = useState(false);
  const { toast } = useToast();

  const handleInputChange = (field: keyof EmergencyContact, value: string) => {
    setContact(prev => ({ ...prev, [field]: value }));
  };

  const generateCard = () => {
    if (!contact.name || !contact.phone || !contact.address) {
      toast({
        title: "Missing Information",
        description: "Please fill in at least name, phone, and address.",
        variant: "destructive",
      });
      return;
    }
    
    setIsGenerated(true);
    toast({
      title: "Emergency Card Generated!",
      description: "Your emergency contact card is ready to download.",
    });
  };

  const downloadCard = () => {
    // Create a formatted text version for download
    const cardText = `
EMERGENCY CONTACT CARD
========================

Personal Information:
Name: ${contact.name}
Phone: ${contact.phone}
Relation: ${contact.relation}
Address: ${contact.address}

Emergency Services:
Nearest Hospital: ${contact.nearestHospital}
Hospital Phone: ${contact.hospitalPhone}
Local Emergency: ${contact.localEmergency}
Police Station: ${contact.policeStation}
Fire Station: ${contact.fireStation}

Important Numbers:
National Emergency: 112
Police: 100
Fire: 101
Ambulance: 108
Disaster Management: 1078

Generated by SafeLearn Disaster Preparedness Platform
`;

    const blob = new Blob([cardText], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `emergency-card-${contact.name.replace(/\s+/g, '-').toLowerCase()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);

    toast({
      title: "Downloaded!",
      description: "Emergency contact card saved to your device.",
    });
  };

  const clearForm = () => {
    setContact({
      name: "",
      phone: "",
      relation: "",
      address: "",
      nearestHospital: "",
      hospitalPhone: "",
      localEmergency: "",
      policeStation: "",
      fireStation: ""
    });
    setIsGenerated(false);
  };

  const emergencyNumbers = [
    { service: "National Emergency", number: "112", icon: <Phone className="w-5 h-5" /> },
    { service: "Police", number: "100", icon: <AlertTriangle className="w-5 h-5" /> },
    { service: "Fire Department", number: "101", icon: <AlertTriangle className="w-5 h-5" /> },
    { service: "Ambulance", number: "108", icon: <Heart className="w-5 h-5" /> },
    { service: "Disaster Management", number: "1078", icon: <AlertTriangle className="w-5 h-5" /> },
  ];

  return (
    <div className="min-h-screen">
      <Header onLanguageChange={setLanguage} currentLanguage={language} />
      
      <main className="container mx-auto px-4 py-8">
        <div className="max-w-4xl mx-auto">
          <div className="text-center mb-8 animate-fade-in">
            <h1 className="text-4xl font-bold mb-4 text-primary">
              {language === "en" ? "Emergency Contact Card" : "आपातकालीन संपर्क कार्ड"}
            </h1>
            <p className="text-xl text-muted-foreground max-w-2xl mx-auto">
              {language === "en" 
                ? "Create and download a personalized emergency contact card with important phone numbers and information."
                : "महत्वपूर्ण फोन नंबर और जानकारी के साथ एक व्यक्तिगत आपातकालीन संपर्क कार्ड बनाएं और डाउनलोड करें।"
              }
            </p>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            {/* Form Section */}
            <div className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <User className="w-5 h-5" />
                    {language === "en" ? "Personal Information" : "व्यक्तिगत जानकारी"}
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <Label htmlFor="name">
                      {language === "en" ? "Full Name" : "पूरा नाम"} *
                    </Label>
                    <Input
                      id="name"
                      value={contact.name}
                      onChange={(e) => handleInputChange("name", e.target.value)}
                      placeholder={language === "en" ? "Enter your full name" : "अपना पूरा नाम दर्ज करें"}
                    />
                  </div>
                  <div>
                    <Label htmlFor="phone">
                      {language === "en" ? "Phone Number" : "फोन नंबर"} *
                    </Label>
                    <Input
                      id="phone"
                      value={contact.phone}
                      onChange={(e) => handleInputChange("phone", e.target.value)}
                      placeholder={language === "en" ? "Your phone number" : "आपका फोन नंबर"}
                    />
                  </div>
                  <div>
                    <Label htmlFor="relation">
                      {language === "en" ? "Emergency Contact Relation" : "आपातकालीन संपर्क रिश्ता"}
                    </Label>
                    <Input
                      id="relation"
                      value={contact.relation}
                      onChange={(e) => handleInputChange("relation", e.target.value)}
                      placeholder={language === "en" ? "e.g., Parent, Guardian, Spouse" : "जैसे माता-पिता, अभिभावक, पति/पत्नी"}
                    />
                  </div>
                  <div>
                    <Label htmlFor="address">
                      {language === "en" ? "Address" : "पता"} *
                    </Label>
                    <Input
                      id="address"
                      value={contact.address}
                      onChange={(e) => handleInputChange("address", e.target.value)}
                      placeholder={language === "en" ? "Your home address" : "आपका घर का पता"}
                    />
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <MapPin className="w-5 h-5" />
                    {language === "en" ? "Local Emergency Services" : "स्थानीय आपातकालीन सेवाएं"}
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <Label htmlFor="hospital">
                      {language === "en" ? "Nearest Hospital" : "निकटतम अस्पताल"}
                    </Label>
                    <Input
                      id="hospital"
                      value={contact.nearestHospital}
                      onChange={(e) => handleInputChange("nearestHospital", e.target.value)}
                      placeholder={language === "en" ? "Hospital name" : "अस्पताल का नाम"}
                    />
                  </div>
                  <div>
                    <Label htmlFor="hospitalPhone">
                      {language === "en" ? "Hospital Phone" : "अस्पताल फोन"}
                    </Label>
                    <Input
                      id="hospitalPhone"
                      value={contact.hospitalPhone}
                      onChange={(e) => handleInputChange("hospitalPhone", e.target.value)}
                      placeholder={language === "en" ? "Hospital contact number" : "अस्पताल संपर्क नंबर"}
                    />
                  </div>
                  <div>
                    <Label htmlFor="policeStation">
                      {language === "en" ? "Police Station" : "पुलिस स्टेशन"}
                    </Label>
                    <Input
                      id="policeStation"
                      value={contact.policeStation}
                      onChange={(e) => handleInputChange("policeStation", e.target.value)}
                      placeholder={language === "en" ? "Local police station" : "स्थानीय पुलिस स्टेशन"}
                    />
                  </div>
                  <div>
                    <Label htmlFor="fireStation">
                      {language === "en" ? "Fire Station" : "फायर स्टेशन"}
                    </Label>
                    <Input
                      id="fireStation"
                      value={contact.fireStation}
                      onChange={(e) => handleInputChange("fireStation", e.target.value)}
                      placeholder={language === "en" ? "Local fire station" : "स्थानीय दमकल स्टेशन"}
                    />
                  </div>
                </CardContent>
              </Card>

              <div className="flex gap-4">
                <Button onClick={generateCard} variant="hero" size="lg" className="flex-1">
                  {language === "en" ? "Generate Card" : "कार्ड बनाएं"}
                </Button>
                <Button onClick={clearForm} variant="outline" size="lg">
                  {language === "en" ? "Clear" : "साफ़ करें"}
                </Button>
              </div>
            </div>

            {/* Preview/Info Section */}
            <div className="space-y-6">
              {/* National Emergency Numbers */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2 text-emergency">
                    <PhoneCall className="w-5 h-5" />
                    {language === "en" ? "National Emergency Numbers" : "राष्ट्रीय आपातकालीन नंबर"}
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 gap-3">
                    {emergencyNumbers.map((item, index) => (
                      <div key={index} className="flex items-center justify-between p-3 bg-muted rounded-lg">
                        <div className="flex items-center gap-3">
                          <div className="text-emergency">{item.icon}</div>
                          <span className="font-medium">{item.service}</span>
                        </div>
                        <Badge variant="destructive" className="font-mono text-sm">
                          {item.number}
                        </Badge>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              {/* Generated Card Preview */}
              {isGenerated && (
                <Card className="animate-scale-in border-primary">
                  <CardHeader className="gradient-primary text-white">
                    <CardTitle className="flex items-center gap-2">
                      <AlertTriangle className="w-5 h-5" />
                      {language === "en" ? "Emergency Contact Card" : "आपातकालीन संपर्क कार्ड"}
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="p-6 space-y-4">
                    <div className="text-center border-b pb-4">
                      <h3 className="text-xl font-bold">{contact.name}</h3>
                      <p className="text-muted-foreground">{contact.phone}</p>
                      {contact.relation && (
                        <Badge variant="secondary">{contact.relation}</Badge>
                      )}
                    </div>
                    
                    <div className="space-y-2 text-sm">
                      <div><strong>Address:</strong> {contact.address}</div>
                      {contact.nearestHospital && (
                        <div><strong>Hospital:</strong> {contact.nearestHospital}</div>
                      )}
                      {contact.hospitalPhone && (
                        <div><strong>Hospital Phone:</strong> {contact.hospitalPhone}</div>
                      )}
                      {contact.policeStation && (
                        <div><strong>Police:</strong> {contact.policeStation}</div>
                      )}
                      {contact.fireStation && (
                        <div><strong>Fire Station:</strong> {contact.fireStation}</div>
                      )}
                    </div>

                    <div className="pt-4 border-t">
                      <Button onClick={downloadCard} variant="success" size="lg" className="w-full gap-2">
                        <Download className="w-4 h-4" />
                        {language === "en" ? "Download Card" : "कार्ड डाउनलोड करें"}
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              )}
            </div>
          </div>
        </div>
      </main>
    </div>
  );
}